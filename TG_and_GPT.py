import logging
import openai
import os
import numpy as np
import gspread  # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets
from google.oauth2.service_account import Credentials
from telegram import InlineKeyboardMarkup, Update, ReplyKeyboardMarkup, BotCommand
from telegram._inline.inlinekeyboardbutton import InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
from dotenv import load_dotenv
from pymilvus import connections, Collection, utility
from telegram.ext._handlers.callbackqueryhandler import CallbackQueryHandler
import tiktoken
import boto3  # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å MinIO (S3 —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–µ API)
from botocore.exceptions import NoCredentialsError
import re
import asyncio
from datetime import datetime
from google.oauth2.service_account import Credentials
import requests
from openpyxl import load_workbook  # —Ä–∞–±–æ—Ç–∞ —Å xlsx
from io import StringIO
from io import BytesIO

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv("keys_google_sheet.env")
load_dotenv("keys_gpt_telegram.env")
load_dotenv("keys_milvus.env")
load_dotenv("keys_minio.env")

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")  # –¢–æ–∫–µ–Ω –¢–ì –ë–æ—Ç–∞
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")  # API —Ç–æ–∫–µ–Ω OpenAI
MODEL_GPT_INT = os.getenv("MODEL_GPT_INT")  # –ú–æ–¥–µ–ª—å –ò–ò, —Å –∫–æ—Ç–æ—Ä–æ–π –≤–µ–¥–µ—Ç—Å—è –¥–∏–∞–ª–æ–≥

MINIO_ACCESS_KEY = os.getenv("MINIO_ACCESS_KEY")  # –õ–æ–≥–∏–Ω –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—èMiniO
MINIO_SECRET_KEY = os.getenv("MINIO_SECRET_KEY")  # –ü–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è MiniO
MINIO_ENDPOINT = os.getenv("MINIO_ENDPOINT")  # IP –∏ –ø–æ—Ä—Ç MiniO
MINIO_REGION_NAME = os.getenv("MINIO_REGION_NAME")  # –†–µ–≥–∏–æ–Ω MiniO
MINIO_BUCKET_NAME = os.getenv("MINIO_BUCKET_NAME")  # –ù–∞–∑–≤–∞–Ω–∏–µ –ë–∞–∫–µ—Ç–∞ MiniO
MINIO_FOLDER_DOCS_NAME_SPRAVOCHNIK = os.getenv(
    "MINIO_FOLDER_DOCS_NAME_SPRAVOCHNIK"
)  # –ù–∞–∑–≤–∞–Ω–∏–µ –ü–∞–ø–∫–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¢–∞–±–ª–∏—Ü/–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤
MINIO_FOLDER_DOCS_NAME_MANUAL = os.getenv(
    "MINIO_FOLDER_DOCS_NAME_MANUAL"
)  # –ù–∞–∑–≤–∞–Ω–∏–µ –ü–∞–ø–∫–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¢–∞–±–ª–∏—Ü/–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ú–∞–Ω—É–∞–ª–∞
MINIO_FOLDER_LOGS_NAME = os.getenv(
    "MINIO_FOLDER_LOGS_NAME"
)  # –ú–µ—Å—Ç–æ, –∫—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞


MILVUS_DB_NAME_FIRST = os.getenv(
    "MILVUS_DB_NAME_FIRST"
)  # –ë–î –∫–æ–ª–ª–µ–∫—Ü–∏–π –ú–∏–ª–≤—É—Å–∞ c —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–º
MILVUS_DB_NAME_SECOND = os.getenv(
    "MILVUS_DB_NAME_SECOND"
)  # –ë–î –∫–æ–ª–ª–µ–∫—Ü–∏–π –ú–∏–ª–≤—É—Å–∞ —Å –º–∞–Ω—É–∞–ª–∞–º–∏
MILVUS_COLLECTION = os.getenv("MILVUS_COLLECTION")  # –ö–æ–ª–ª–µ–∫—Ü–∏—è –ú–∏–ª–≤—É—Å–∞
MILVUS_HOST = os.getenv("MILVUS_HOST")  # IP –ú–∏–ª–≤—É—Å–∞
MILVUS_PORT = os.getenv("MILVUS_PORT")  # –ü–æ—Ä—Ç –ú–∏–ª–≤—É—Å–∞
MILVUS_USER = os.getenv("MILVUS_USER")  # –õ–æ–≥–∏–Ω –ú–∏–ª–≤—É—Å–∞(–ë–î)
MILVUS_PASSWORD = os.getenv("MILVUS_PASSWORD")  # –ü–∞—Ä–æ–ª—å –ú–∏–ª–≤—É—Å–∞(–ë–î)

SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")  # ID Google –¢–∞–±–ª–∏—Ü—ã MODEL_GPT_INT

private_key = os.getenv("GOOGLE_PRIVATE_KEY")
if not private_key:
    raise ValueError("GOOGLE_PRIVATE_KEY is not set")
private_key = private_key.replace("\\n", "\n")

google_credentials = {  # –¢—É—Ç –≤—Å–µ –∫–ª—é—á–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã API –æ—Ç –≥—É–≥–ª —â–∏—Ç
    "type": os.getenv("GOOGLE_TYPE"),
    "project_id": os.getenv("GOOGLE_PROJECT_ID"),
    "private_key_id": os.getenv("GOOGLE_PRIVATE_KEY_ID"),
    "private_key": private_key,  # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
    "client_email": os.getenv("GOOGLE_CLIENT_EMAIL"),
    "client_id": os.getenv("GOOGLE_CLIENT_ID"),
    "auth_uri": os.getenv("GOOGLE_AUTH_URI"),
    "token_uri": os.getenv("GOOGLE_TOKEN_URI"),
    "auth_provider_x509_cert_url": os.getenv("GOOGLE_AUTH_PROVIDER_CERT_URL"),
    "client_x509_cert_url": os.getenv("GOOGLE_CLIENT_CERT_URL"),
}

URL = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getUpdates"
firts_message_from_tg_bot = "–ü—Ä–∏–≤–µ—Ç!üñê –Ø –∞—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤, –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –∑–∞–¥–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å, –≤—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É '/metod'"

minio_folder_docs_name = MINIO_FOLDER_DOCS_NAME_SPRAVOCHNIK
milvus_collection_name = MILVUS_COLLECTION
# milvus_collection_name = MILVUS_COLLECTION_SPRAVOCHNIK


# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª—é—á OpenAI API
openai.api_key = OPENAI_API_KEY

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets API
credentials = Credentials.from_service_account_info(
    google_credentials, scopes=["https://www.googleapis.com/auth/spreadsheets"]
)
client = gspread.authorize(credentials)
sheet = client.open_by_key(SPREADSHEET_ID).sheet1
logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MiniO –Ω–∞—á–∞—Ç–æ")
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MinIO –∫–ª–∏–µ–Ω—Ç–∞
s3_client = boto3.client(
    "s3",
    endpoint_url=MINIO_ENDPOINT,
    aws_access_key_id=MINIO_ACCESS_KEY,
    aws_secret_access_key=MINIO_SECRET_KEY,
    region_name=MINIO_REGION_NAME,
)
logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MiniO –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
# print(f'–õ–æ–≥–∏–Ω "{MINIO_ACCESS_KEY}" –¥–ª—è –ë–î MiniO')  # –ü—Ä–æ–≤–µ—Ä–∫–∞ LOG
# print(f'–ü–∞—Ä–æ–ª—å "{MINIO_SECRET_KEY}" –¥–ª—è –ë–î MiniO')  # –ü—Ä–æ–≤–µ—Ä–∫–∞ PSWD


logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º Milvus –Ω–∞—á–∞—Ç–æ")
# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Milvus —Å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–º
connections.connect(
    alias="default",
    host=MILVUS_HOST,
    port=MILVUS_PORT,
    db_name=MILVUS_DB_NAME_FIRST,
    user=MILVUS_USER,
    password=MILVUS_PASSWORD,
)


# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
# all_collections = utility.list_collections()       <======== –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π


# –°–æ–±–∏—Ä–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –∏–∑ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π
all_texts = []
all_embeddings = []
all_table_references = []
all_related_tables = []  # –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è related_table

count_e = 0
target_collection_name = "engrs_spravochnik"

try:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º
    if not utility.has_collection(target_collection_name):
        raise ValueError(f"–ö–æ–ª–ª–µ–∫—Ü–∏—è '{target_collection_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
    collection = Collection(name=target_collection_name)
    if collection.num_entities > 0:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        entities = collection.query(
            expr="id > 0",
            output_fields=["embedding", "text", "reference", "related_table"],
        )
        all_texts = [entity["text"] for entity in entities]
        all_embeddings = [entity["embedding"] for entity in entities]
        all_table_references = [entity["reference"] for entity in entities]
        all_related_tables = [entity.get("related_table", "") for entity in entities]

        logger.info(f"–ö–æ–ª–ª–µ–∫—Ü–∏—è '{target_collection_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
        logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º Milvus –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

    else:
        logger.info(f"–ö–æ–ª–ª–µ–∫—Ü–∏—è '{target_collection_name}' –ø—É—Å—Ç–∞.")
except Exception as e:
    logger.info(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ '{target_collection_name}': {e}")

"""for collection_name in all_collections:
    collection = Collection(name=collection_name)

    try:
        if collection.num_entities > 0:
            entities = collection.query(
                expr="id > 0",
                output_fields=["embedding", "text", "reference", "related_table"],                        –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π
            )
            texts = [entity["text"] for entity in entities]
            embeddings = [entity["embedding"] for entity in entities]
            table_references = [entity["reference"] for entity in entities]
            related_tables = [
                entity.get("related_table", "") for entity in entities
            ]  # –ü–æ–ª—É—á–∞–µ–º related_table

            all_texts.extend(texts)
            all_embeddings.extend(embeddings)
            all_table_references.extend(table_references)
            all_related_tables.extend(related_tables)  # –ó–∞–ø–æ–ª–Ω—è–µ–º related_table

            print(f"–ö–æ–ª–ª–µ–∫—Ü–∏—è '{collection_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
            
    except Exception as e:
        print(
            f"–ö–æ–ª–ª–µ–∫—Ü–∏—è {collection_name} –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞({count_e}): {e}"
        )
        count_e += 1"""

logger.info(f"---------------------------")
logger.info(f"| –í—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã |")
logger.info(f"---------------------------")


async def load_collections_data(context):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Milvus.
    –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ user_data, —á—Ç–æ–±—ã –±—ã—Ç—å –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ context.user_data
    user_data = context.user_data
    user_data["all_collections"] = []
    user_data["all_texts"] = []
    user_data["all_embeddings"] = []
    user_data["all_table_references"] = []
    user_data["all_related_tables"] = []
    user_data["all_related_collections"] = []
    user_data["all_collections_per_embedding"] = []

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π
    collections = utility.list_collections()
    user_data["all_collections"] = collections

    for collection_name in collections:
        try:
            collection = Collection(name=collection_name)
            if collection.num_entities > 0:
                entities = await asyncio.to_thread(
                    collection.query,
                    expr="id > 0",
                    output_fields=["embedding", "text", "reference", "related_table"],
                )

                user_data["all_texts"].extend([entity["text"] for entity in entities])
                user_data["all_embeddings"].extend(
                    [entity["embedding"] for entity in entities]
                )
                user_data["all_table_references"].extend(
                    [entity["reference"] for entity in entities]
                )
                user_data["all_related_tables"].extend(
                    [entity.get("related_table", "") for entity in entities]
                )
                user_data["all_collections_per_embedding"].extend(
                    [collection_name] * len(entities)
                )

                logger.info(f"–ö–æ–ª–ª–µ–∫—Ü–∏—è '{collection_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ '{collection_name}': {e}")

    logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


# –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def create_embedding_for_query(query):
    response = openai.embeddings.create(
        input=[query],
        model="text-embedding-ada-002",
    )
    return response.data[0].embedding


# –ú–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
def find_most_similar(query_embedding, top_n=15):
    query_embedding_np = np.array([query_embedding], dtype=np.float32)
    similarities = np.dot(all_embeddings, query_embedding_np.T)
    most_similar_indices = np.argsort(similarities, axis=0)[::-1][:top_n]
    return (
        [all_texts[i] for i in most_similar_indices.flatten()],
        [all_table_references[i] for i in most_similar_indices.flatten()],
        [
            all_related_tables[i] for i in most_similar_indices.flatten()
        ],  # –î–æ–±–∞–≤–ª—è–µ–º related_table
    )


def find_most_similar_with_collections(context, query_embedding, top_n=10):
    """
    –ù–∞—Ö–æ–¥–∏—Ç –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - –¢–µ–∫—Å—Ç—ã,
    - –ö–æ–ª–ª–µ–∫—Ü–∏–∏, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –≤–∑—è—Ç—ã –≤–µ–∫—Ç–æ—Ä–∞,
    - –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–π.
    """
    user_data = context.user_data
    query_embedding_np = np.array([query_embedding], dtype=np.float32)
    embeddings = np.array(user_data.get("all_embeddings", []))
    collections_per_embedding = user_data.get("all_collections_per_embedding", [])

    if len(embeddings) == 0:
        return [], set()  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ –∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ö–æ–¥—Å—Ç–≤–æ
    similarities = np.dot(embeddings, query_embedding_np.T)
    most_similar_indices = np.argsort(similarities, axis=0)[::-1][:top_n]

    relevant_collections = set()

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    logger.info("–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:")
    for idx in most_similar_indices.flatten():
        relevant_collections.add(collections_per_embedding[idx])
        logger.info(
            f"–¢–µ–∫—Å—Ç: {user_data['all_texts'][idx]}, "
            f"–°—Ö–æ–¥—Å—Ç–≤–æ: {similarities[idx][0]}"
            f"–ö–æ–ª–ª–µ–∫—Ü–∏—è: {collections_per_embedding[idx]}"
        )
    user_data["all_collections"] = list(relevant_collections)

    return list(relevant_collections)


# –ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ MinIO (S3 —Ö—Ä–∞–Ω–∏–ª–∏—â–∞)
def read_table_from_minio(table_reference):
    """–ß–∏—Ç–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∏–∑ MinIO –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞."""
    try:
        response = s3_client.get_object(Bucket=MINIO_BUCKET_NAME, Key=table_reference)
        buffer = BytesIO(response["Body"].read())  # –°—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç—å
        workbook = load_workbook(buffer)  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ xlsx
        sheet = workbook.active  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã –≤ —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
        table_content = ""
        for row in sheet.iter_rows(values_only=True):
            row_content = "\t".join(map(str, row))  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
            table_content += row_content + "\n"

        return table_content.strip()
    except NoCredentialsError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ MinIO: {e}")
        return None
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –∏–∑ MinIO: {e}")
        return None


# –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context):
    await update.message.reply_text(firts_message_from_tg_bot)


# –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /info
async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /info.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ.
    """
    info_message = (
        "–Ø –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤.\n"
        "–ß–µ–º—É —è —É–∂–µ –Ω–∞—É—á–∏–ª—Å—èüßê:\n"
        "1Ô∏è‚É£ –ò—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫—É –ò–Ω–∂–µ–Ω–µ—Ä–æ–≤.\n"
        "2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–∞–±–ª–∏—Ü—ã –∏–ª–∏ —Ä–∏—Å—É–Ω–∫–∏ –∏–∑ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –ò–Ω–∂–Ω–µ—Ä–æ–≤.\n"
        "–ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤, —Ç–æ –≤—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É ‚û°Ô∏è/metod‚¨ÖÔ∏è!"
    )
    await update.message.reply_text(info_message)


# –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /metod
async def metod(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ü–æ–∏—Å–∫ –ø–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫—É", callback_data="engs_bot")],
        # [InlineKeyboardButton("–ü–æ–∏—Å–∫ –º–∞–Ω—É–∞–ª–æ–≤", callback_data="manuals_engrs")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç—ã –ë–æ—Ç–∞:", reply_markup=reply_markup
    )


# –ú–µ—Ç–æ–¥ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ—Ç—Ä—ã–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
def count_tokens(text):
    encoding = tiktoken.encoding_for_model("text-embedding-ada-002")
    tokens = encoding.encode(text)
    return len(tokens)


# –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Google –¢–∞–±–ª–∏—Ü—É
def save_user_question_to_sheet(user_message, gpt_response, user_tag, log_filename):
    next_row = len(sheet.get_all_values()) + 1  # –°–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
    sheet.update(
        f"A{next_row}:F{next_row}",
        [[next_row - 1, user_message, gpt_response, "", user_tag, log_filename]],
    )  # –ó–∞–ø–∏—Å—å –Ω–æ–º–µ—Ä–∞ —Ç–µ—Å—Ç–∞, –≤–æ–ø—Ä–æ—Å–∞, –æ—Ç–≤–µ—Ç–∞ GPT, –æ—Ü–µ–Ω–∫–∏ (–ø—É—Å—Ç–æ), –∏ —Ç–µ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


user_image_context = {}


# –ú–µ—Ç–æ–¥ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
def filter_and_prioritize_context(
    most_similar_texts, most_similar_refs, most_similar_related_tables
):
    texts_and_tables = []
    images = []
    additional_contexts = []  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    added_tables = set()  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü

    # –†–∞–∑–¥–µ–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã –Ω–∞ —Ç–µ–∫—Å—Ç—ã/—Ç–∞–±–ª–∏—Ü—ã –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    for i, ref in enumerate(most_similar_refs):
        related_table = most_similar_related_tables[i]

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü
        if ref.endswith(".xlsx"):
            if ref not in added_tables:
                table_content = read_table_from_minio(
                    f"{minio_folder_docs_name}/{ref}"
                )  # —Å—é–¥–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–∏—à–∏
                if table_content:
                    # texts_and_tables.append(
                    #    (
                    #        f"–¢–∞–±–ª–∏—Ü–∞ –∞–∞–∞–∞ ({ref}):\n{table_content}",
                    #        ref,
                    #    )
                    # )
                    added_tables.add(ref)  # –°—é–¥–∞ —Ç–æ–∂–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–∏—à–∏
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É: {ref}")
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Ç–∞–±–ª–∏—Ü–µ–π
        elif related_table:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤—è–∑—å —Å —Ç–∞–±–ª–∏—Ü–µ–π
            if related_table not in added_tables:
                table_content = read_table_from_minio(
                    f"{minio_folder_docs_name}/{related_table}"
                )
                if table_content:
                    table_name = next(
                        (
                            text
                            for text, reference in zip(all_texts, all_table_references)
                            if reference == related_table
                        ),
                        "–ë–µ–∑—ã–º—è–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞",
                    )
                    texts_and_tables.append(
                        (
                            f"–¢–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫\n ({table_name}):\n{table_content} \n–ö–æ–Ω–µ—Ü —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞",
                            related_table,
                        )
                    )
                    added_tables.add(related_table)

            # –ò—â–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–∞–±–ª–∏—Ü–µ–π
            found_objects = search_by_reference_in_milvus(related_table)
            if found_objects:
                for obj in found_objects:
                    additional_contexts.append(obj["text"])

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        else:
            images.append((most_similar_texts[i], ref))

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–∫—Å—Ç–æ–≤ –∏ —Ç–∞–±–ª–∏—Ü –¥–æ 10
    prioritized_texts_and_tables = texts_and_tables[:10]

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–æ 10
    prioritized_images = images[:10]

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–≤–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–ø–∏—Å–∫–∞ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    return prioritized_texts_and_tables, prioritized_images, additional_contexts


def search_by_reference_in_milvus(reference_value):
    """–ò—â–µ—Ç –æ–±—ä–µ–∫—Ç—ã –≤ Milvus, —É –∫–æ—Ç–æ—Ä—ã—Ö reference —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º."""
    collection = Collection(name=milvus_collection_name)
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Milvus
        result = collection.query(
            expr=f'reference == "{reference_value}"',
            output_fields=["text", "reference"],
        )
        return result if result else None
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ Milvus –¥–ª—è reference '{reference_value}': {e}"
        )
        return None


# –°–∞–º—ã–π –≥–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥, –æ–±—Ä–∞–±–æ—Ç–∫–∏, –ø–æ–ª—É—á–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context):

    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –≤—ã–∑–æ–≤ –Ω—É–∂–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    handle_message_method = context.user_data.get(
        "handle_message_method",  # –ï—Å–ª–∏ –º–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        handle_message,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ç–µ–∫—É—â–∏–π –º–µ—Ç–æ–¥
    )

    # –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –¥—Ä—É–≥–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, handle_message_manuals), –≤—ã–∑—ã–≤–∞–µ–º –µ–≥–æ
    if handle_message_method != handle_message:
        await handle_message_method(update, context)
        return

    user_id = update.message.from_user.id
    user_message = update.message.text
    user_tag = update.message.from_user.username or update.message.from_user.full_name
    # logger.info("")
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_tag}: {user_message}")
    # logger.info("")

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ—Ä–µ–∑ GPT
    try:

        query_embedding = create_embedding_for_query(user_message)
        most_similar_texts, most_similar_refs, most_similar_related_tables = (
            find_most_similar(query_embedding)
        )

        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        prioritized_texts_and_tables, prioritized_images, additional_contexts = (
            filter_and_prioritize_context(
                most_similar_texts, most_similar_refs, most_similar_related_tables
            )
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤ –∏ —Ç–∞–±–ª–∏—Ü
        context_text = "\n\n".join(
            [f"{obj[0]}" for obj in prioritized_texts_and_tables]
            # [f"{obj[0]} ({obj[1]})" for obj in prioritized_texts_and_tables] - –∑–∞–∫–æ–º–µ–Ω—Ç–∏–ª, —Ç.–∫. –ø–æ—Å–ª–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ –±—ã–ª–æ —Å–∏—Å—Ç–µ–º–Ω–æ–µ –∏–º—è —Ä–æ–¥–∏—Ç–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if prioritized_images:
            context_text += "\n\n–†–∏—Å—É–Ω–∫–∏ –∏ —Ç–µ–∫—Å—Ç–∞:\n" + "\n".join(
                [
                    # f"{img[0]} ({img[1]})" for img in prioritized_images - –ø–æ–∫–∞ –Ω–µ –Ω—É–∂–µ–Ω, img1 - —Å—Ç–æ–ª–±–∏–∫ reference –≤ Milvus
                    f"{img[0]}"
                    for img in prioritized_images
                ]  # img[1] —Ç–µ–ø–µ—Ä—å –±–µ—Ä–µ—Ç related_table
            )

        if additional_contexts:
            context_text += "\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:\n" + "\n".join(
                additional_contexts
            )

        table_contexts = []
        images_to_mention = []
        unique_table_references = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ç–∞–±–ª–∏—Ü—ã

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –∏ –∏—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        for i, ref in enumerate(most_similar_refs):
            if ref.endswith(".xlsx"):  # –ï—Å–ª–∏ —ç—Ç–æ —Ç–∞–±–ª–∏—Ü–∞
                if ref not in unique_table_references:
                    unique_table_references.add(ref)
                    table_content = read_table_from_minio(
                        f"{minio_folder_docs_name}/{ref}"
                    )
                    if table_content:
                        table_name = most_similar_texts[i]
                        table_contexts.append(
                            f"-------\n–ù–∞—á–∞–ª–æ\n{table_name}:\n{table_content}\n–ö–æ–Ω–µ—Ü —Ç–∞–±–ª–∏—Ü—ã",
                        )
                        logger.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –∏–∑ MinIO: {ref}")
                    else:
                        logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ {ref} –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ —á—Ç–µ–Ω–∏—è.")
            elif re.search(
                r"–†–∏—Å—É–Ω–æ–∫ \d+ \(.+\)", most_similar_texts[i]
            ):  # –ï—Å–ª–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                images_to_mention.append((most_similar_texts[i], ref))

        if table_contexts:
            context_text += "\n\n–¢–∞–±–ª–∏—Ü—ã:\n" + "\n\n".join(table_contexts)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –ª–æ–≥-—Ñ–∞–π–ª
        log_filename = save_context_to_log(user_tag, context_text)
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        logger.info(
            f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_tag} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {log_filename}"
        )

        token_count = count_tokens(context_text)
        logger.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç {token_count} —Ç–æ–∫–µ–Ω–æ–≤")
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {context_text}")

        # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ä–∏—Å—É–Ω–∫–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ –∏ —Å–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∏—Ö
        all_image_mentions = find_image_mentions(context_text)
        """print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ 1")
        print(f"{all_image_mentions}")
        print(f"–ö–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏ 1")"""
        all_table_mentions = find_table_mentions(context_text)

        images_to_mention = []
        tables_to_mention = []
        for image_text in all_image_mentions:
            """print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ 2")
            print(f"{image_text}")
            print(f"–ö–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏ 2")"""
            image_ref = find_image_reference_in_milvus(image_text)
            if image_ref:
                images_to_mention.append((image_text, image_ref))

        images_text = "\n".join([img[0] for img in images_to_mention])

        for table_text in all_table_mentions:
            table_ref = find_image_reference_in_milvus(table_text)
            if table_ref:
                tables_to_mention.append((table_text, table_ref))
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∫ GPT")
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∫ GPT
        response = openai.chat.completions.create(
            model=MODEL_GPT_INT,
            messages=[
                {
                    "role": "system",
                    "content": (
                        "–Ø —Ö–æ—á—É, —á—Ç–æ–±—ã —Ç—ã –≤—ã—Å—Ç—É–ø–∏–ª –≤ —Ä–æ–ª–∏ –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞-–ø–æ–º–æ—â–Ω–∏–∫–∞ –¥–ª—è –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤. "
                        "–¢–≤–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ - –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –±–µ–∑ –≤—ã–¥—É–º—ã–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏, —á—Ç–æ –Ω–µ –º–æ–∂–µ—à—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å, —Ç–∞–∫ –∫–∞–∫ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ."
                        ""
                        "–ü—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É:"
                        "–ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –±—É–¥—É—Ç —Ç–∞–±–ª–∏—Ü—ã, —Ç—ã –¥–æ–ª–∂–µ–Ω –∏–∑–≤–ª–µ—á—å –∏–∑ –Ω–∏—Ö –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–±–µ–∑ –≤—ã—Ä–µ–∑–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏), –Ω–µ —Å–∂–∏–º–∞—è –µ–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç—É —Ç–∞–±–ª–∏—Ü—É –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ "
                        '–ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö —É–∑–∞–∫–∞–Ω—ã —Ä–∏—Å—É–Ω–∫–∏, —Ç—ã –¥–æ–ª–∂–µ–Ω —É—á–∏—Ç—ã–≤–∞—Ç—å –∏—Ö –≤—Å–µ –≤ –æ—Ç–≤–µ—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–†–∏—Å—É–Ω–∫–æ–∫ X" '
                        # "–ï—Å–ª–∏ —Ç—ã —É–ø–æ–º–∏–Ω–∞–µ—à—å —Ä–∏—Å—É–Ω–∫–∏, —Ç–æ —É–ø–æ–º–∏–Ω–∞–π –∏—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ –†–∏—Å—É–Ω–æ–∫ –•."
                        # "–ï—Å–ª–∏ —Ç—ã —É–ø–æ–º–∏–Ω–∞–µ—à—å —Ç–∞–±–ª–∏—Ü—ã, —Ç–æ —É–ø–æ–º–∏–Ω–∞–π –∏—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¢–∞–±–ª–∏—Ü–ï –•"
                        # "–ï—Å–ª–∏ —Ç—ã —É–ø–æ–º–∏–Ω–∞–µ—à—å —Ç–∞–±–ª–∏—Ü—ã, —Ç–æ –Ω–µ —Å–∫–ª–æ–Ω—è–π –¢–∞–±–ª–∏—Ü—ã\–¢–∞–±–ª–∏—Ü\–¢–∞–±–ª–∏—Ü–µ –• –∏ —Ç.–¥. –í—Å–µ–≥–¥–∞ –ø–∏—à–∏ –¢–∞–±–ª–∏–¶–ê –•"
                        ""
                        ""
                        "–ö–∞–∫ –æ—Ç–≤–µ—á–∞—Ç—å:"
                        "–ù–µ –æ–≤–µ—á–∞–π –≤ –¥—É—Ö–µ '–õ—É—á—à–µ –≤—Å–µ–≥–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—é –∏–ª–∏ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∏–Ω–∂–µ–Ω–µ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'"
                        "–í—Å–µ–≥–¥–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ —É–∫–∞–∑—ã–≤–∞–π, –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞–∫–∏—Ö —Ç–∞–±–ª–∏—Ü(–í –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –µ—Å—Ç—å —Å–ª–æ–≤–æ '–¢–∞–±–ª–∏—Ü–∞ ') –±—ã–ª–∞ –æ—Å–Ω–æ–≤–∞–Ω–∞ –±–æ–ª—å—à–∞—è —á–∞—Å—Ç—å —Ç–≤–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞, –ø–∏—à–∏ –µ—ë –∏–º—è –ø–æ–ª–Ω–æ—Å—Ç—å—é."
                        "–Ω–µ —Å–∫–ª–æ–Ω—è–π –∏ –Ω–µ –º–µ–Ω—è–π —Ñ–æ—Ä–º—É –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—à—å, —Ç–æ –ø–∏—à–∏ –¢–∞–±–ª–∏—Ü–∞"
                        "–ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π/—Ç–∞–±–ª–∏—Ü - –ù–µ –ø–∏—à–∏ —á—Ç–æ '—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è/—Ç–∞–±–ª–∏—Ü—ã:–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç' –∏–ª–∏ '–¢–∞–±–ª–∏—Ü—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –æ—Å–Ω–æ–≤–∞–Ω –æ—Ç–≤–µ—Ç:- –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç' –µ—Å–ª–∏ –Ω–µ—Ç —Ç–∞–∫–∏—Ö, —Ç–æ –≤–æ–æ–±—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–∏—à–∏"
                        "–ï—Å–ª–∏ —Ç–µ–±–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ —á—Ç–æ-—Ç–æ –∏–ª–∏ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å, –Ω–µ –≥–æ–≤–æ—Ä–∏ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
                        "–ù–µ —É–∫–∞–∑—ã–≤–∞–π —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –±–æ–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ"
                        ""
                        "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–¢–∞–±–ª–∏—Ü–∞ –•' –∏–ª–∏ '–¢–∞–±–ª–∏—Ü–∞ –• –ø–æ–ª–Ω–æ—Å—Ç—å—é' –∏–ª–∏ '–ß—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¢–∞–±–ª–∏—Ü–µ –•', '–ß—Ç–æ –≤ –¢–∞–±–ª–∏—Ü–µ –•')"
                        "—Ç—ã –¥–æ–ª–∂–µ–Ω —Å–æ–æ–±—â–∏—Ç—å, —á—Ç–æ –¢–∞–±–ª–∏—Ü–∞ –• (–Ω–∞–∑–≤–∞–Ω–∏–µ) –µ—Å—Ç—å –≤ –ë–î, –±–µ–∑ –≤—ã–≤–æ–¥–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ç–∞–±–ª–∏—Ü—ã. –Ω–µ –≥–æ–≤–æ—Ä–∏, —á—Ç–æ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ"
                    ),
                },
                {
                    "role": "system",
                    "content": f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:\n\n{images_text}\n\n"
                    f"–í–æ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n{context_text}",
                },
                {"role": "user", "content": user_message},
            ],
            temperature=0.3,
            timeout=10,
        )
        # logger.info(f"response –æ—Ç–≤–µ—Ç–∞ {response}")

        bot_reply = response.choices[0].message.content

        logger.info("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç GPT")
        logger.info("–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞")

        # –ù–∞–π—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ä–∏—Å—É–Ω–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –≤ bot_reply
        additional_image_mentions = find_image_mentions(bot_reply)
        additional_table_mentions = find_table_mentions(bot_reply)

        for image_text in additional_image_mentions:
            if image_text not in [mention[0] for mention in images_to_mention]:
                # –ï—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ bot_reply, –Ω–æ –Ω–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –∏—â–µ–º –µ–≥–æ —Å—Å—ã–ª–∫—É
                image_ref = find_image_reference_in_milvus(image_text)
                if image_ref:
                    images_to_mention.append((image_text, image_ref))

        for table_text in additional_table_mentions:
            if table_text not in [mention[0] for mention in tables_to_mention]:
                # –ï—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ bot_reply, –Ω–æ –Ω–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –∏—â–µ–º –µ–≥–æ —Å—Å—ã–ª–∫—É
                table_ref = find_image_reference_in_milvus(table_text)
                if table_ref:
                    tables_to_mention.append((table_text, table_ref))

        bot_reply = response.choices[0].message.content
        # –ó–∞–º–µ–Ω–∞ —Å–∏–º–≤–æ–ª–æ–≤ < –∏ > –Ω–∞ HTML-—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç—ã
        bot_reply = bot_reply.replace("<", "&lt;").replace(">", "&gt;")

        # print("–°–ø–∏—Å–æ–∫ images_to_mention")
        # print(images_to_mention)
        # print("–ö–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ images_to_mention")
        bot_reply = normalize_mentions(bot_reply)
        formatted_reply = format_image_links(bot_reply, images_to_mention)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_tag}: {formatted_reply}")
        await send_large_message(update, formatted_reply)
        await send_table_to_chat(update, tables_to_mention, formatted_reply)

        images_to_send = []
        for image_text, ref in images_to_mention:
            if image_text.split(" ")[0] in bot_reply:
                images_to_send.append(ref)

        save_user_question_to_sheet(user_message, bot_reply, user_tag, log_filename)

        reply_keyboard = [["–•–æ—Ä–æ—à–æ"], ["–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"], ["–ü–ª–æ—Ö–æ"]]
        markup = ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=True, resize_keyboard=True
        )
        await update.message.reply_text("–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞:", reply_markup=markup)
        await asyncio.sleep(1)
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        await update.message.reply_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}"
        )

        await update.message.reply_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}"
        )


# –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–∫–ª–æ–Ω–µ–Ω–∏–π —É–ø–æ–º—è–Ω—É—Ç—ã—Ö —Ç–∞–±–ª–∏—Ü –∏ —Ä–∏—Å—É–Ω–∫–æ–≤
def normalize_mentions(gpt_response):
    """
    –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤ '–†–∏—Å—É–Ω–æ–∫' –∏ '–¢–∞–±–ª–∏—Ü–∞' –Ω–∞ –±–∞–∑–æ–≤—ã–µ —Ñ–æ—Ä–º—ã –ø–µ—Ä–µ–¥ —á–∏—Å–ª–∞–º–∏.
    """
    # print(f"gpt –æ—Ç–≤–µ—Ç –¥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {gpt_response}")
    # –®–∞–±–ª–æ–Ω –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏–π "–†–∏—Å—É–Ω–æ–∫" –ø–µ—Ä–µ–¥ —á–∏—Å–ª–∞–º–∏
    pattern_risunok = r"–†–∏—Å—É–Ω–∫[–∞–µ—É–æ–≤]{1}(?=\s*\d+)"
    # –®–∞–±–ª–æ–Ω –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏–π "–¢–∞–±–ª–∏—Ü–∞" –ø–µ—Ä–µ–¥ —á–∏—Å–ª–∞–º–∏
    pattern_tablitsa = r"–¢–∞–±–ª–∏—Ü[–∞–µ—É–æ–≤—ã]{1}(?=\s*\d+)"

    # –ó–∞–º–µ–Ω—è–µ–º —Å–∫–ª–æ–Ω–µ–Ω–∏—è "–†–∏—Å—É–Ω–æ–∫" –Ω–∞ –±–∞–∑–æ–≤—É—é —Ñ–æ—Ä–º—É
    gpt_response = re.sub(pattern_risunok, "–†–∏—Å—É–Ω–æ–∫", gpt_response)
    # –ó–∞–º–µ–Ω—è–µ–º —Å–∫–ª–æ–Ω–µ–Ω–∏—è "–¢–∞–±–ª–∏—Ü–∞" –Ω–∞ –±–∞–∑–æ–≤—É—é —Ñ–æ—Ä–º—É
    gpt_response = re.sub(pattern_tablitsa, "–¢–∞–±–ª–∏—Ü–∞", gpt_response)

    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    # print(f"gpt –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {gpt_response}")

    return gpt_response


# –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ –º–∞–Ω—É–∞–ª–æ–≤
async def handle_message_manuals(update: Update, context):
    if context.user_data.get("selected_db") != "manuals_engrs":
        logger.error("handle_message_manuals –≤—ã–∑–≤–∞–Ω –≤–Ω–µ —Ä–µ–∂–∏–º–∞ –º–∞–Ω—É–∞–ª–æ–≤.")
        return

    user_message = update.message.text
    user_tag = update.message.from_user.username or update.message.from_user.full_name

    try:
        query_embedding = create_embedding_for_query(user_message)

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        related_collections = find_most_similar_with_collections(
            context, query_embedding
        )

        # –°–æ–±–∏—Ä–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–π
        context_descriptions = []
        for collection_name in related_collections:
            description = get_collection_description(collection_name)
            if description:
                context_descriptions.append(
                    f"–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ '{collection_name}': {description}"
                )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        context.user_data["context_descriptions"] = "\n".join(context_descriptions)

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        logger.info(
            f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏–π –∫–æ–ª–ª–µ–∫—Ü–∏–π:\n{context.user_data['context_descriptions']}"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–π
        if context_descriptions:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ–ø–∏—Å–∞–Ω–∏–π –∫–æ–ª–ª–µ–∫—Ü–∏–π
            descriptions_text = "\n\n".join(context_descriptions)
            await update.message.reply_text(
                f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–π —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:\n\n{descriptions_text}"
            )
        else:
            # –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–π –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await update.message.reply_text(
                "–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ –º–∞–Ω—É–∞–ª–æ–≤: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")


# –ú–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ —É–ø–æ–º—è–Ω—É—Ç—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —Ñ–æ—Ä–º–∞—Ç—É "–†–∏—Å—É–Ω–æ–∫ –•"
def search_by_figure_id(figure_id):
    collection = Collection(name=milvus_collection_name)
    try:
        result = collection.query(
            expr=f'figure_id == "{figure_id.strip()}"',  # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            output_fields=["text", "reference"],
        )
        if result:
            return result[0]["text"]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ Milvus –¥–ª—è '{figure_id}': {e}")
    return None


# –ú–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —É–ø–æ–º—è–Ω—É—Ç—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç–µ GPT
def format_image_links(bot_reply, images_to_mention):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞, –¥–æ–±–∞–≤–ª—è—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    for image_text, ref in images_to_mention:
        # –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_url = (
            f"{MINIO_ENDPOINT}/{MINIO_BUCKET_NAME}/{minio_folder_docs_name}/{ref}"
        )
        # print(f"{image_url}, {ref}")
        # logger.info(f"–Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤—Å–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ - {image_text} {ref}")
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ HTML
        link_text = f'<a href="{image_url}" target="_blank">{image_text}</a>'
        # print("–ü—Ä–æ–≤–µ—Ä–∫–∞ link_text")
        # print(link_text)
        # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è "–†–∏—Å—É–Ω–æ–∫ X" –Ω–∞ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        bot_reply = re.sub(
            rf"\b{re.escape(image_text)}\b",  # \b –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–ª–æ–≤–∞
            link_text,
            bot_reply,
        )

    return bot_reply


# –ú–µ—Ç–æ–¥, –Ω–∞—Ö–æ–¥—è—â–∏–π –≤ MiniO —Ç–∞–±–ª–∏—á–∫–∏ –ø–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—é "–¢–∞–±–ª–∏—Ü–∞ –•"
async def send_table_to_chat(update, tables_to_mention, formatted_reply):
    """
    –ù–∞—Ö–æ–¥–∏—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ MinIO –ø–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—é, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Ö –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –≤ –æ—Ç–≤–µ—Ç–µ GPT,
    –∏—Å–∫–ª—é—á–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –≤ —á–∞—Ç Telegram.
    """
    sent_tables = set()  # –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü

    for table_text, ref in tables_to_mention:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –≤ –æ—Ç–≤–µ—Ç–µ GPT
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
        pattern = rf"\b{re.escape(table_text)}\b"  # \b –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã —Å–ª–æ–≤–∞

        if not re.search(
            pattern, formatted_reply
        ):  # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∞—Å—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Ä–∞–Ω–µ–µ
        if ref in sent_tables:
            # logger.info(f"–¢–∞–±–ª–∏—Ü–∞ {table_text} —É–∂–µ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞–Ω–µ–µ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue

        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã: {table_text} —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –∏–º–µ–Ω–µ–º {ref}")
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ MinIO
            table_key = f"{minio_folder_docs_name}/{ref}"
            response = s3_client.get_object(Bucket=MINIO_BUCKET_NAME, Key=table_key)
            file_data = response["Body"].read()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
            await update.message.reply_document(
                document=BytesIO(file_data),
                filename=f"{table_text}.xlsx",
                # caption=f"–¢–∞–±–ª–∏—Ü–∞ {table_text} –∏–∑ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.",
            )
            # logger.info(f"–¢–∞–±–ª–∏—Ü–∞ {table_text} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö
            sent_tables.add(ref)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É {table_text}: {e}")
            await update.message.reply_text(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–∞–±–ª–∏—Ü—ã {table_text}."
            )


# –ú–µ—Ç–æ–¥, —Ä–∞–∑–¥–µ–ª—è—é—â–∏–π —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –¢–ì –ë–æ—Ç–∞ –ø–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤ —Å –ª–æ–≥ –∑–∞–≥–ª—é—á–µ–Ω–∏–µ–º –ø–æ –∞–±–∑–∞—Ü–∞–º
async def send_large_message(update, text, max_length=4000):
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ –∞–±–∑–∞—Ü–∞–º
    paragraphs = text.split("\n\n")
    current_message = ""

    for paragraph in paragraphs:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –∞–±–∑–∞—Ü —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
        if len(paragraph) > max_length:
            # –ï—Å–ª–∏ –∞–±–∑–∞—Ü –ø—Ä–µ–≤—ã—à–∞–µ—Ç max_length, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ –Ω–∞ –ø–æ–¥—á–∞—Å—Ç–∏
            sub_paragraphs = [
                paragraph[i : i + max_length]
                for i in range(0, len(paragraph), max_length)
            ]
            for sub_paragraph in sub_paragraphs:
                await update.message.reply_text(sub_paragraph, parse_mode="HTML")
            continue  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∞–±–∑–∞—Ü—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞–∑–±–∏–µ–Ω–∏—è

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∞–±–∑–∞—Ü –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if len(current_message) + len(paragraph) + 2 <= max_length:
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–±–∑–∞—Ü –≤ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if current_message:
                current_message += "\n\n" + paragraph
            else:
                current_message = paragraph
        else:
            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ
            await update.message.reply_text(current_message, parse_mode="HTML")
            current_message = paragraph  # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–µ–≥–æ –∞–±–∑–∞—Ü–∞

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å
    if current_message:
        await update.message.reply_text(current_message, parse_mode="HTML")


# –ú–µ—Ç–æ–¥ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫ —É–ø–æ–º—è–Ω—É—Ç—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –æ—Ç–≤–µ—Ç–µ GPT –ø–æ –†–∏—Å—É–Ω–æ–∫ –•
def find_image_mentions(text):
    pattern = r"–†–∏—Å—É–Ω–æ–∫ \d+"

    return re.findall(pattern, text)


# –ú–µ—Ç–æ–¥ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫ —É–ø–æ–º—è–Ω—É—Ç—ã—Ö —Ç–∞–±–ª–∏—Ü –≤ –æ—Ç–≤–µ—Ç–µ GPT –ø–æ –¢–∞–±–ª–∏—Ü–∞ ...
def find_table_mentions(text):
    pattern = r"–¢–∞–±–ª–∏—Ü–∞ \d+"  # –ò—â–µ—Ç —Ñ—Ä–∞–∑—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å "–¢–∞–±–ª–∏—Ü–∞"
    return re.findall(pattern, text)


def find_image_reference_in_milvus(figure_id):
    collection = Collection(name=milvus_collection_name)
    try:
        result = collection.query(
            expr=f'figure_id == "{figure_id}"', output_fields=["reference"]
        )
        # print("–ü—Ä–æ–≤–µ—Ä–∫–∞ 1")
        # print(f"figure_id - {figure_id}")
        # print(f"–ù–∞–π–¥–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç - {result[0]["reference"]}")
        if result:
            return result[0]["reference"]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ Milvus –¥–ª—è '{figure_id}': {e}")
    return None


# –ú–µ—Ç–æ–¥ –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥ —Ñ–∞–π–ª–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def sanitize_filename(filename):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –∑–∞–º–µ–Ω—ã –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞."""
    return "".join(c if c.isalnum() or c in (" ", "_", "-") else "_" for c in filename)


# –ú–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–µ—Ç –ª–æ–≥ —Ñ–∞–π–ª —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ø—Ä–æ—Å–∞ —é–∑–µ—Ä–∞
def get_unique_log_filename(user_tag):
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏ –∏ –Ω–∏–∫–Ω–µ–π–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    sanitized_tag = sanitize_filename(
        user_tag
    )  # –û—á–∏—â–∞–µ–º –Ω–∏–∫–Ω–µ–π–º –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    return f"context_log_{sanitized_tag}_{timestamp}.txt"


# –ú–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥ —Ñ–∞–π–ª
def save_context_to_log(user_tag, context_text):
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –ª–æ–≥-—Ñ–∞–π–ª–∞
    unique_log_filename = get_unique_log_filename(user_tag)
    log_key = f"{MINIO_FOLDER_LOGS_NAME}/{unique_log_filename}"  # –õ–æ–≥ –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ –±–∞–∫–µ—Ç–µ –ø–æ–¥ –∫–ª—é—á–æ–º logs/–∏–º—è_—Ñ–∞–π–ª–∞

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –≤ MinIO
        s3_client.put_object(
            Bucket=MINIO_BUCKET_NAME,  # –ò–º—è –±–∞–∫–µ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
            Key=log_key,  # –ü—É—Ç—å (–∫–ª—é—á) –∫ —Ñ–∞–π–ª—É –≤ –±–∞–∫–µ—Ç–µ
            Body=context_text.encode("utf-8"),  # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        )
        # logger.info(f"–§–∞–π–ª {unique_log_filename} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∫–µ—Ç–µ MinIO")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {unique_log_filename} –≤ MinIO: {e}")
        raise

    return log_key  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª—é—á —Ñ–∞–π–ª–∞ –≤ –±–∞–∫–µ—Ç–µ –≤–º–µ—Å—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏


# –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ü–µ–Ω–æ–∫
async def handle_feedback(update: Update, context):
    quality_score = update.message.text  # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    next_row = len(sheet.get_all_values())  # –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ –æ—Ü–µ–Ω–∫–∏
    sheet.update(f"D{next_row}", [[quality_score]])  # –ó–∞–ø–∏—Å—å –æ—Ü–µ–Ω–∫–∏ –≤ 4-–π —Å—Ç–æ–ª–±–∏–∫
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!")


# –ú–µ—Ç–æ–¥ –æ—Ç—á–∏—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤ –º–æ–º–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
def clear_message_bot():

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ offset, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    response = requests.get(URL)
    if response.status_code == 200:
        updates = response.json()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ 'result' –∏ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        if "result" in updates and updates["result"]:
            for update in updates["result"]:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                username = (
                    update.get("message", {})
                    .get("from", {})
                    .get("username", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
                )
                text = update.get("message", {}).get("text", "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞")

                # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")

            # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π
            last_update_id = updates["result"][-1]["update_id"]
            clear_url = f"{URL}?offset={last_update_id + 1}"
            requests.get(clear_url)
            logger.info("–û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –æ—á–∏—â–µ–Ω–∞.")
        else:
            logger.info("–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")
    else:
        logger.info(f"–û—à–∏–±–∫–∞ API Telegram: {response.status_code}, {response.text}")


"""# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ω—É–∂–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Milvus
def connect_to_milvus(db_name):
    connections.connect(
        alias="default",
        host=MILVUS_HOST,
        port=MILVUS_PORT,
        db_name=db_name,
        user=MILVUS_USER,
        password=MILVUS_PASSWORD,
    )
    print(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Milvus: {db_name}")
"""


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ callback –∫–Ω–æ–ø–∫–∏ –≤ –¢–ì –ë–æ—Ç–µ
async def select_db(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    context.user_data["minio_folder_docs_name"] = MINIO_FOLDER_DOCS_NAME_SPRAVOCHNIK
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞

    # global minio_folder_docs_name  # –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≥–ª–æ–±–∞–ª—å–Ω–æ–π—ã
    global milvus_collection_name  # –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≥–ª–æ–±–∞–ª—å–Ω–æ–π

    selected_db = query.data  # –ü–æ–ª—É—á–∞–µ–º callback_data –∏–∑ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏
    context.user_data["selected_db"] = selected_db  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # connect_to_milvus(selected_db)  # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    connections.disconnect(alias="default")  # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –Ω—ã–Ω–µ—à–Ω–µ–π –±–¥ –≤ Milvus

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if selected_db == "engs_bot":
        await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–∂–∏–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞: {selected_db}")
        minio_folder_docs_name = MINIO_FOLDER_DOCS_NAME_SPRAVOCHNIK  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü\—Ä–∏—Å—É–Ω–∫–æ–≤
        # logger.info(minio_folder_docs_name)
        milvus_collection_name = MILVUS_COLLECTION  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ milvus
        # logger.info(milvus_collection_name)
        context.user_data["minio_folder_docs_name"] = MINIO_FOLDER_DOCS_NAME_SPRAVOCHNIK
        context.user_data["milvus_collection_name"] = MILVUS_COLLECTION
        context.user_data["handle_message_method"] = handle_message
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Milvus —Å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–º
        connections.connect(
            alias="default",
            host=MILVUS_HOST,
            port=MILVUS_PORT,
            db_name=MILVUS_DB_NAME_FIRST,
            user=MILVUS_USER,
            password=MILVUS_PASSWORD,
        )
    else:
        await query.edit_message_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –º–∞–Ω—É–∞–ª–æ–≤: {selected_db}"
        )
        minio_folder_docs_name = (
            MINIO_FOLDER_DOCS_NAME_MANUAL  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü\—Ä–∏—Å—É–Ω–∫–æ–≤
        )
        # logger.info(minio_folder_docs_name)
        milvus_collection_name = MILVUS_COLLECTION  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ milvus
        # logger.info(milvus_collection_name)
        context.user_data["minio_folder_docs_name"] = MINIO_FOLDER_DOCS_NAME_MANUAL
        context.user_data["milvus_collection_name"] = MILVUS_COLLECTION
        context.user_data["handle_message_method"] = handle_message_manuals
        connections.connect(
            alias="default",
            host=MILVUS_HOST,
            port=MILVUS_PORT,
            db_name=MILVUS_DB_NAME_FIRST,
            user=MILVUS_USER,
            password=MILVUS_PASSWORD,
        )
    await load_collections_data(context)
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø—Ä–∏ –≤—Ç–æ—Ä–æ–º —Ä–µ–∂–∏–º–µ —Ä–∞–±–æ—Ç—ã


# –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è (description) –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Milvus
def get_collection_description(collection_name):
    # logger.error(f"–í—ã–∑–≤–∞–ª—Å—è –º–µ—Ç–æ–¥ get_collection_description!!!")
    try:
        collection = Collection(name=collection_name)
        return collection.description  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    except Exception as e:
        logger.error(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ '{collection_name}': {e}"
        )
        return None


async def set_bot_commands(application):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –¥–ª—è Telegram-–±–æ—Ç–∞.
    """
    commands = [
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        # BotCommand("help", "–ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å"),
        BotCommand("metod", "–í—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"),
        BotCommand("info", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"),
    ]
    await application.bot.set_my_commands(commands)


# –ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –º–µ–Ω—é—à–∫–∏ /comands
def run_async_task(task):
    try:
        loop = asyncio.get_running_loop()
    except RuntimeError:  # –ï—Å–ª–∏ —Ü–∏–∫–ª–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
    return loop.run_until_complete(task)


# –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã –ë–æ—Ç–∞
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫—É—é –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∞–ª–∏
    if query.data == "engs_bot":
        await query.edit_message_text(
            "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–∂–∏–º : –ü–æ–∏—Å–∫ –ø–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫—Éüìî \n\n–ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"
        )
    elif query.data == "manuals_engrs":
        await query.edit_message_text(
            "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–∂–∏–º: –ü–æ–∏—Å–∫ –º–∞–Ω—É–∞–ª–æ–≤üìö \n\n–ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"
        )


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–µ–Ω—é
    run_async_task(set_bot_commands(application))

    application.add_handler(CommandHandler("start", start))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    application.add_handler(CommandHandler("info", info))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /info
    application.add_handler(CommandHandler("metod", metod))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /metod
    application.add_handler(
        CallbackQueryHandler(handle_callback)
    )  # –æ–±–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –ø–æ –≤—ã–±–æ—Ä—É —Ä–µ–∂–º–∞ —Ä–∞–±–æ—Ç—ã –ë–æ—Ç–∞
    # application.add_handler(CallbackQueryHandler(select_db))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
    application.add_handler(
        MessageHandler(
            filters.TEXT & ~filters.Regex("^(–•–æ—Ä–æ—à–æ|–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ|–ü–ª–æ—Ö–æ)$"),
            handle_message,
        )
    )
    application.add_handler(
        MessageHandler(
            filters.Regex("^(–•–æ—Ä–æ—à–æ|–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ|–ü–ª–æ—Ö–æ)$"),
            handle_feedback,
        )
    )
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    clear_message_bot()
    application.run_polling()
    """application.run_webhook(
        listen="localhost", port=80, webhook_url="https://exapmle.com:80"
    )  # –¢–µ—Å—Ç —á–µ—Ä–µ–∑ JMeter. –í–∫–ª—é—á–∞–µ—à—å —ç—Ç–æ –∏ –≤—ã–∫–ª—é—á–∞–µ—à—å "application.run_polling()"
    """


if __name__ == "__main__":
    main()
