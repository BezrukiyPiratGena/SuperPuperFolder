import base64
import requests
import json
import os
import re
import shutil
import logging
import warnings
import pdfplumber
import pytesseract
import cv2
from pdf2image import convert_from_path
from concurrent.futures import ThreadPoolExecutor, as_completed
import easyocr
import numpy as np

warnings.simplefilter("ignore")

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
reader = easyocr.Reader(["ru", "en"], gpu=True)
POPPLER_PATH = r"C:\Project1\Poppler\poppler-24.08.0\Library\bin"


pdf_folder = r"C:\Project1\GITProjects\elastic_docker"
ready_folder = os.path.join(pdf_folder, "ready")
elastic_url = (
    "https://kibana.vnigma.ru:30006/pdf_docs_new_v3/_doc?pipeline=pdf_pipeline"
)

# üîê –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
elastic_user = "kosadmin_user"
elastic_password = "Cir73SPb+"
headers = {"Content-Type": "application/json"}

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
log_file = "upload_log.txt"
logging.basicConfig(
    filename=log_file,
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    encoding="utf-8",
)

# === –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É "ready", –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç ===
if not os.path.exists(ready_folder):
    os.makedirs(ready_folder)
    print(f"üìÇ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {ready_folder}")


def extract_text_from_pdf(pdf_path):
    """–°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º, –∑–∞—Ç–µ–º —á–µ—Ä–µ–∑ OCR, –µ—Å–ª–∏ –Ω–µ—É–¥–∞—á–Ω–æ."""
    text = ""

    # === 1. –ü–æ–ø—ã—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ ===
    try:
        with pdfplumber.open(pdf_path) as pdf:
            extracted_pages = [page.extract_text() for page in pdf.pages]
            text = "\n\n".join(filter(None, extracted_pages)).strip()
    except Exception as e:
        print(
            f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Ñ–∞–π–ª–∞ {os.path.basename(pdf_path)} —á–µ—Ä–µ–∑ pdfplumber: {e}"
        )

    # === 2. –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º OCR ===
    if not text or len(text) < 50:  # –ú–æ–∂–Ω–æ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä–æ–≥, –Ω–∞–ø—Ä. < 50 —Å–∏–º–≤–æ–ª–æ–≤
        print(f"üîç PDF '{os.path.basename(pdf_path)}' - —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º OCR...")
        text_blocks = []
        pages = convert_from_path(pdf_path, dpi=200, poppler_path=POPPLER_PATH)
        for img in pages:
            img_np = preprocess_image(np.array(img))
            lines = reader.readtext(img_np, detail=0, paragraph=True)
            lines = [line for line in lines if len(line.strip()) > 2]
            text_blocks.append("\n".join(lines))
        text = "\n\n".join(text_blocks)

    return text


def preprocess_image(img_np):
    gray = cv2.cvtColor(img_np, cv2.COLOR_RGB2GRAY)
    _, thresh = cv2.threshold(gray, 150, 255, cv2.THRESH_BINARY)
    return cv2.cvtColor(thresh, cv2.COLOR_GRAY2RGB)


def pdf_to_base64(pdf_path):
    with open(pdf_path, "rb") as f:
        return base64.b64encode(f.read()).decode("utf-8")


def split_text_by_sentences(text, max_length=10000):
    print("–ó–∞–ø—É—Å—Ç–∏–ª—Å—è split_text_by_sentences")
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º —Ç–∞–∫, —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π —á–∞–Ω–∫ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–ª max_length —Å–∏–º–≤–æ–ª–æ–≤.
    –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –ø–æ –∑–Ω–∞–∫–∞–º ., !, ? —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–±–µ–ª–æ–≤ –ø–æ—Å–ª–µ –Ω–∏—Ö.
    """
    sentences = re.split(r"(?<=[.!?])\s+", text)
    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ—Ç –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è), –ø—Ä–æ—Å—Ç–æ —Ä–∞–∑–¥–µ–ª–∏–º –ø–æ –¥–ª–∏–Ω–µ.
    if len(sentences) == 1:
        return [text[:max_length], text[max_length:]]

    chunks = []
    current_chunk = ""
    for sentence in sentences:
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —á–∞–Ω–∫ –ø—É—Å—Ç, –Ω–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if not current_chunk:
            current_chunk = sentence
        # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç–∞
        elif len(current_chunk) + 1 + len(sentence) <= max_length:
            current_chunk += " " + sentence
        else:
            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —á–∞–Ω–∫ —É–∂–µ –ø–æ—á—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Å —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            chunks.append(current_chunk)
            current_chunk = sentence
    if current_chunk:
        chunks.append(current_chunk)
    return chunks


def process_pdf(filename):
    file_path = os.path.join(pdf_folder, filename)
    ready_path = os.path.join(ready_folder, filename)

    print(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ñ–∞–π–ª: {filename}")
    logging.info(f"–ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {filename}")

    try:
        pdf_text = extract_text_from_pdf(file_path)
        header_text = f"{filename}\n\n"
        full_text = header_text + pdf_text

        print(f"–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ - {len(full_text)}")
        chunks = split_text_by_sentences(full_text, max_length=10000)
        base64_data = pdf_to_base64(file_path)

        for i, chunk in enumerate(chunks, start=1):
            text_to_send = (
                f"{chunk}\n\n(part {i} –∏–∑ {len(chunks)})" if len(chunks) > 1 else chunk
            )
            print(f"–¥–ª–∏–Ω–∞ —Å—Ç–∞–∫–∞ - {len(text_to_send)}")
            document = {
                "data": base64_data,
                "text": text_to_send,
                "filename": filename,
                "attachment": {"content": text_to_send},
            }

            response = requests.post(
                elastic_url,
                headers=headers,
                auth=(elastic_user, elastic_password),
                data=json.dumps(document),
                verify=False,
            )

            if response.status_code in [200, 201]:
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —á–∞—Å—Ç—å {i} —Ñ–∞–π–ª–∞: {filename}")
                logging.info(f"–ß–∞—Å—Ç—å {i} —Ñ–∞–π–ª–∞ {filename} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
            else:
                print(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Å—Ç–∏ {i} —Ñ–∞–π–ª–∞ {filename}: –ö–æ–¥ {response.status_code} - {response.text}"
                )
                logging.error(
                    f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Å—Ç–∏ {i} —Ñ–∞–π–ª–∞ {filename}: –ö–æ–¥ {response.status_code} - {response.text}"
                )

        shutil.move(file_path, ready_path)
        print(f"üìÇ –§–∞–π–ª –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤ {ready_folder}")
        logging.info(f"–§–∞–π–ª {filename} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤ {ready_folder}")

    except requests.exceptions.RequestException as req_err:
        print(f"üö® –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {filename}: {req_err}")
        logging.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {filename}: {req_err}")
    except json.JSONDecodeError as json_err:
        print(f"‚ö† –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {filename}: {json_err}")
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {filename}: {json_err}")
    except Exception as e:
        print(f"‚ö† –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {filename}: {e}")
        logging.exception(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {filename}: {e}")


# === –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏ ===
with ThreadPoolExecutor(max_workers=4) as executor:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
    futures = [
        executor.submit(process_pdf, filename)
        for filename in os.listdir(pdf_folder)
        if filename.lower().endswith(".pdf")
    ]
    for future in as_completed(futures):
        try:
            future.result()
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")

print("üöÄ –í—Å–µ PDF –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ 'ready'!")
