import base64
import requests
import json
import os
import shutil
import logging
import warnings
import docx  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å .docx —Ñ–∞–π–ª–∞–º–∏
from concurrent.futures import ThreadPoolExecutor, as_completed

warnings.simplefilter("ignore")

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
word_folder = r"C:\Users\CIR\Desktop\jopa\–î–æ–∫–∏\word"
ready_folder = os.path.join(word_folder, "ready")
elastic_url = "https://kibana.vnigma.ru:30006/word_docs/_doc?pipeline=word_pipeline"

# üîê –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
elastic_user = "kosadmin_user"
elastic_password = "Cir73SPb+"
headers = {"Content-Type": "application/json"}

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
log_file = "upload_log_word.txt"
logging.basicConfig(
    filename=log_file,
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    encoding="utf-8",
)

# === –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É "ready", –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç ===
if not os.path.exists(ready_folder):
    os.makedirs(ready_folder)
    print(f"üìÇ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {ready_folder}")


def extract_text_from_docx(docx_path):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ Word –¥–æ–∫—É–º–µ–Ω—Ç–∞ (.docx)."""
    try:
        document = docx.Document(docx_path)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {docx_path}: {e}")
        return ""
    text = []
    for para in document.paragraphs:
        if para.text:
            text.append(para.text)
    return "\n".join(text).strip()


def docx_to_base64(docx_path):
    with open(docx_path, "rb") as f:
        return base64.b64encode(f.read()).decode("utf-8")


def process_docx(filename):
    file_path = os.path.join(word_folder, filename)
    ready_path = os.path.join(ready_folder, filename)

    print(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ñ–∞–π–ª: {filename}")
    logging.info(f"–ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {filename}")

    try:
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        doc_text = f"{filename}\n\n" + extract_text_from_docx(file_path)
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ base64
        base64_data = docx_to_base64(file_path)
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        document = {"data": base64_data, "text": doc_text, "filename": filename}

        response = requests.post(
            elastic_url,
            headers=headers,
            auth=(elastic_user, elastic_password),
            data=json.dumps(document),
            verify=False,
        )

        if response.status_code in [200, 201]:
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {filename}")
            shutil.move(file_path, ready_path)
            print(f"üìÇ –§–∞–π–ª –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤ {ready_folder}")
            logging.info(
                f"–§–∞–π–ª {filename} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤ {ready_folder}"
            )
        else:
            print(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {filename}: –ö–æ–¥ {response.status_code} - {response.text}"
            )
            logging.error(
                f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: –ö–æ–¥ {response.status_code} - {response.text}"
            )

    except requests.exceptions.RequestException as req_err:
        print(f"üö® –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {filename}: {req_err}")
        logging.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {filename}: {req_err}")
    except json.JSONDecodeError as json_err:
        print(f"‚ö† –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {filename}: {json_err}")
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {filename}: {json_err}")
    except Exception as e:
        print(f"‚ö† –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {filename}: {e}")
        logging.exception(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {filename}: {e}")


# === –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏ ===
with ThreadPoolExecutor(max_workers=4) as executor:
    futures = [
        executor.submit(process_docx, filename)
        for filename in os.listdir(word_folder)
        if filename.lower().endswith(".docx")
    ]
    for future in as_completed(futures):
        try:
            future.result()
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")

print("üöÄ –í—Å–µ Word –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ 'ready'!")
