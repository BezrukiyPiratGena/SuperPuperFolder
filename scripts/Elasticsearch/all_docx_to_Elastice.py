import base64
import re
import requests
import json
import os
import shutil
import logging
import warnings
import docx
from concurrent.futures import ThreadPoolExecutor, as_completed

warnings.simplefilter("ignore")

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
word_folder = r"C:\Users\CIR\Desktop\jopa\–î–æ–∫–∏\All_manuals\trouble word"
ready_folder = os.path.join(word_folder, "ready")
elastic_url = (
    "https://kibana.vnigma.ru:30006/pdf_docs_new_v2/_doc?pipeline=pdf_pipeline"
)

# üîê –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
elastic_user = "kosadmin_user"
elastic_password = "Cir73SPb+"
headers = {"Content-Type": "application/json"}

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
log_file = "upload_log_word.txt"
logging.basicConfig(
    filename=log_file,
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    encoding="utf-8",
)
logger = logging.getLogger(__name__)

# === –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É "ready", –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç ===
if not os.path.exists(ready_folder):
    os.makedirs(ready_folder)
    print(f"üìÇ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {ready_folder}")


def extract_text_from_docx(docx_path):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ Word –¥–æ–∫—É–º–µ–Ω—Ç–∞ (.docx)."""
    try:
        document = docx.Document(docx_path)
        text = []
        for para in document.paragraphs:
            if para.text:
                text.append(para.text)
        return "\n".join(text).strip()
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ {docx_path}: {e}")
        return ""


def docx_to_base64(docx_path):
    with open(docx_path, "rb") as f:
        return base64.b64encode(f.read()).decode("utf-8")


def split_text_by_sentences(text, max_length=10000):
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞.
    """
    print("–ó–∞–ø—É—Å—Ç–∏–ª—Å—è split_text_by_sentences")
    sentences = re.split(r"(?<=[.!?])\s+", text)
    if len(sentences) == 1:
        return [text[:max_length], text[max_length:]]

    chunks = []
    current_chunk = ""
    for sentence in sentences:
        if not current_chunk:
            current_chunk = sentence
        elif len(current_chunk) + 1 + len(sentence) <= max_length:
            current_chunk += " " + sentence
        else:
            chunks.append(current_chunk)
            current_chunk = sentence
    if current_chunk:
        chunks.append(current_chunk)
    return chunks


def process_docx(filename):
    file_path = os.path.join(word_folder, filename)
    ready_path = os.path.join(ready_folder, filename)

    print(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ñ–∞–π–ª: {filename}")
    logger.info(f"–ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {filename}")

    try:
        doc_text = extract_text_from_docx(file_path)
        header_text = f"{filename}\n\n"
        full_text = header_text + doc_text

        print(f"–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ - {len(full_text)}")
        chunks = split_text_by_sentences(full_text, max_length=10000)
        base64_data = docx_to_base64(file_path)

        all_parts_success = (
            True  # ‚úÖ –ù–æ–≤—ã–π —Ñ–ª–∞–≥: –±—ã–ª–∏ –ª–∏ –≤—Å–µ —á–∞—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –±–µ–∑ –æ—à–∏–±–æ–∫
        )

        for i, chunk in enumerate(chunks, start=1):
            text_to_send = (
                f"{chunk}\n\n(part {i} –∏–∑ {len(chunks)})" if len(chunks) > 1 else chunk
            )
            document = {
                "data": base64_data,
                "text": text_to_send,
                "filename": filename,
                "attachment": {"content": text_to_send},
            }

            response = requests.post(
                elastic_url,
                headers=headers,
                auth=(elastic_user, elastic_password),
                data=json.dumps(document),
                verify=False,
            )

            if response.status_code in [200, 201]:
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —á–∞—Å—Ç—å {i} —Ñ–∞–π–ª–∞: {filename}")
                logger.info(f"–ß–∞—Å—Ç—å {i} —Ñ–∞–π–ª–∞ {filename} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
            else:
                print(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Å—Ç–∏ {i} —Ñ–∞–π–ª–∞ {filename}: –ö–æ–¥ {response.status_code} - {response.text}"
                )
                logger.error(
                    f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Å—Ç–∏ {i} —Ñ–∞–π–ª–∞ {filename}: –ö–æ–¥ {response.status_code} - {response.text}"
                )
                all_parts_success = False  # ‚ùó –û—Ç–º–µ—á–∞–µ–º –æ—à–∏–±–∫—É

        # ‚úÖ –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ ready —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ —á–∞—Å—Ç–∏ —É—Å–ø–µ—à–Ω—ã–µ
        if all_parts_success:
            try:
                shutil.move(file_path, ready_path)
                print(f"üìÇ –§–∞–π–ª –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤ {ready_folder}")
                logger.info(
                    f"–§–∞–π–ª {filename} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤ {ready_folder}"
                )
            except Exception as move_err:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {filename}: {move_err}")
        else:
            print(f"‚ö†Ô∏è –§–∞–π–ª {filename} –ù–ï –ø–µ—Ä–µ–º–µ—â—ë–Ω –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏.")

    except requests.exceptions.RequestException as req_err:
        print(f"üö® –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {filename}: {req_err}")
        logger.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {filename}: {req_err}")
    except json.JSONDecodeError as json_err:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {filename}: {json_err}")
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {filename}: {json_err}")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {filename}: {e}")
        logger.exception(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {filename}: {e}")


# === –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ .docx —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ ===
with ThreadPoolExecutor(max_workers=4) as executor:
    futures = [
        executor.submit(process_docx, filename)
        for filename in os.listdir(word_folder)
        if filename.lower().endswith(".docx")
    ]
    for future in as_completed(futures):
        try:
            future.result()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")

print("üöÄ –í—Å–µ Word –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ 'ready'!")
